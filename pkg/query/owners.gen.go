// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/balcieren/go-monolithic-boilerplate/pkg/entity"
)

func newOwner(db *gorm.DB, opts ...gen.DOOption) owner {
	_owner := owner{}

	_owner.ownerDo.UseDB(db, opts...)
	_owner.ownerDo.UseModel(&entity.Owner{})

	tableName := _owner.ownerDo.TableName()
	_owner.ALL = field.NewAsterisk(tableName)
	_owner.ID = field.NewField(tableName, "id")
	_owner.CreatedAt = field.NewTime(tableName, "created_at")
	_owner.UpdatedAt = field.NewTime(tableName, "updated_at")
	_owner.DeletedAt = field.NewField(tableName, "deleted_at")
	_owner.Name = field.NewString(tableName, "name")

	_owner.fillFieldMap()

	return _owner
}

type owner struct {
	ownerDo

	ALL       field.Asterisk
	ID        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String

	fieldMap map[string]field.Expr
}

func (o owner) Table(newTableName string) *owner {
	o.ownerDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o owner) As(alias string) *owner {
	o.ownerDo.DO = *(o.ownerDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *owner) updateTableName(table string) *owner {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewField(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Name = field.NewString(table, "name")

	o.fillFieldMap()

	return o
}

func (o *owner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *owner) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["name"] = o.Name
}

func (o owner) clone(db *gorm.DB) owner {
	o.ownerDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o owner) replaceDB(db *gorm.DB) owner {
	o.ownerDo.ReplaceDB(db)
	return o
}

type ownerDo struct{ gen.DO }

type IOwnerDo interface {
	gen.SubQuery
	Debug() IOwnerDo
	WithContext(ctx context.Context) IOwnerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOwnerDo
	WriteDB() IOwnerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOwnerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOwnerDo
	Not(conds ...gen.Condition) IOwnerDo
	Or(conds ...gen.Condition) IOwnerDo
	Select(conds ...field.Expr) IOwnerDo
	Where(conds ...gen.Condition) IOwnerDo
	Order(conds ...field.Expr) IOwnerDo
	Distinct(cols ...field.Expr) IOwnerDo
	Omit(cols ...field.Expr) IOwnerDo
	Join(table schema.Tabler, on ...field.Expr) IOwnerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOwnerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOwnerDo
	Group(cols ...field.Expr) IOwnerDo
	Having(conds ...gen.Condition) IOwnerDo
	Limit(limit int) IOwnerDo
	Offset(offset int) IOwnerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOwnerDo
	Unscoped() IOwnerDo
	Create(values ...*entity.Owner) error
	CreateInBatches(values []*entity.Owner, batchSize int) error
	Save(values ...*entity.Owner) error
	First() (*entity.Owner, error)
	Take() (*entity.Owner, error)
	Last() (*entity.Owner, error)
	Find() ([]*entity.Owner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Owner, err error)
	FindInBatches(result *[]*entity.Owner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Owner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOwnerDo
	Assign(attrs ...field.AssignExpr) IOwnerDo
	Joins(fields ...field.RelationField) IOwnerDo
	Preload(fields ...field.RelationField) IOwnerDo
	FirstOrInit() (*entity.Owner, error)
	FirstOrCreate() (*entity.Owner, error)
	FindByPage(offset int, limit int) (result []*entity.Owner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOwnerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o ownerDo) Debug() IOwnerDo {
	return o.withDO(o.DO.Debug())
}

func (o ownerDo) WithContext(ctx context.Context) IOwnerDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ownerDo) ReadDB() IOwnerDo {
	return o.Clauses(dbresolver.Read)
}

func (o ownerDo) WriteDB() IOwnerDo {
	return o.Clauses(dbresolver.Write)
}

func (o ownerDo) Session(config *gorm.Session) IOwnerDo {
	return o.withDO(o.DO.Session(config))
}

func (o ownerDo) Clauses(conds ...clause.Expression) IOwnerDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ownerDo) Returning(value interface{}, columns ...string) IOwnerDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ownerDo) Not(conds ...gen.Condition) IOwnerDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ownerDo) Or(conds ...gen.Condition) IOwnerDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ownerDo) Select(conds ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ownerDo) Where(conds ...gen.Condition) IOwnerDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ownerDo) Order(conds ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ownerDo) Distinct(cols ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ownerDo) Omit(cols ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ownerDo) Join(table schema.Tabler, on ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ownerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ownerDo) RightJoin(table schema.Tabler, on ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ownerDo) Group(cols ...field.Expr) IOwnerDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ownerDo) Having(conds ...gen.Condition) IOwnerDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ownerDo) Limit(limit int) IOwnerDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ownerDo) Offset(offset int) IOwnerDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ownerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOwnerDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ownerDo) Unscoped() IOwnerDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ownerDo) Create(values ...*entity.Owner) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ownerDo) CreateInBatches(values []*entity.Owner, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ownerDo) Save(values ...*entity.Owner) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ownerDo) First() (*entity.Owner, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Owner), nil
	}
}

func (o ownerDo) Take() (*entity.Owner, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Owner), nil
	}
}

func (o ownerDo) Last() (*entity.Owner, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Owner), nil
	}
}

func (o ownerDo) Find() ([]*entity.Owner, error) {
	result, err := o.DO.Find()
	return result.([]*entity.Owner), err
}

func (o ownerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Owner, err error) {
	buf := make([]*entity.Owner, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ownerDo) FindInBatches(result *[]*entity.Owner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ownerDo) Attrs(attrs ...field.AssignExpr) IOwnerDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ownerDo) Assign(attrs ...field.AssignExpr) IOwnerDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ownerDo) Joins(fields ...field.RelationField) IOwnerDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ownerDo) Preload(fields ...field.RelationField) IOwnerDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ownerDo) FirstOrInit() (*entity.Owner, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Owner), nil
	}
}

func (o ownerDo) FirstOrCreate() (*entity.Owner, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Owner), nil
	}
}

func (o ownerDo) FindByPage(offset int, limit int) (result []*entity.Owner, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ownerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ownerDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ownerDo) Delete(models ...*entity.Owner) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ownerDo) withDO(do gen.Dao) *ownerDo {
	o.DO = *do.(*gen.DO)
	return o
}
