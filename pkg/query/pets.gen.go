// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/balcieren/go-monolithic-boilerplate/pkg/entity"
)

func newPet(db *gorm.DB, opts ...gen.DOOption) pet {
	_pet := pet{}

	_pet.petDo.UseDB(db, opts...)
	_pet.petDo.UseModel(&entity.Pet{})

	tableName := _pet.petDo.TableName()
	_pet.ALL = field.NewAsterisk(tableName)
	_pet.ID = field.NewField(tableName, "id")
	_pet.CreatedAt = field.NewTime(tableName, "created_at")
	_pet.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pet.DeletedAt = field.NewField(tableName, "deleted_at")
	_pet.OwnerID = field.NewField(tableName, "owner_id")
	_pet.Name = field.NewString(tableName, "name")
	_pet.Type = field.NewString(tableName, "type")

	_pet.fillFieldMap()

	return _pet
}

type pet struct {
	petDo

	ALL       field.Asterisk
	ID        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	OwnerID   field.Field
	Name      field.String
	Type      field.String

	fieldMap map[string]field.Expr
}

func (p pet) Table(newTableName string) *pet {
	p.petDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pet) As(alias string) *pet {
	p.petDo.DO = *(p.petDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pet) updateTableName(table string) *pet {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewField(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.OwnerID = field.NewField(table, "owner_id")
	p.Name = field.NewString(table, "name")
	p.Type = field.NewString(table, "type")

	p.fillFieldMap()

	return p
}

func (p *pet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pet) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["owner_id"] = p.OwnerID
	p.fieldMap["name"] = p.Name
	p.fieldMap["type"] = p.Type
}

func (p pet) clone(db *gorm.DB) pet {
	p.petDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pet) replaceDB(db *gorm.DB) pet {
	p.petDo.ReplaceDB(db)
	return p
}

type petDo struct{ gen.DO }

type IPetDo interface {
	gen.SubQuery
	Debug() IPetDo
	WithContext(ctx context.Context) IPetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPetDo
	WriteDB() IPetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPetDo
	Not(conds ...gen.Condition) IPetDo
	Or(conds ...gen.Condition) IPetDo
	Select(conds ...field.Expr) IPetDo
	Where(conds ...gen.Condition) IPetDo
	Order(conds ...field.Expr) IPetDo
	Distinct(cols ...field.Expr) IPetDo
	Omit(cols ...field.Expr) IPetDo
	Join(table schema.Tabler, on ...field.Expr) IPetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPetDo
	Group(cols ...field.Expr) IPetDo
	Having(conds ...gen.Condition) IPetDo
	Limit(limit int) IPetDo
	Offset(offset int) IPetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPetDo
	Unscoped() IPetDo
	Create(values ...*entity.Pet) error
	CreateInBatches(values []*entity.Pet, batchSize int) error
	Save(values ...*entity.Pet) error
	First() (*entity.Pet, error)
	Take() (*entity.Pet, error)
	Last() (*entity.Pet, error)
	Find() ([]*entity.Pet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Pet, err error)
	FindInBatches(result *[]*entity.Pet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Pet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPetDo
	Assign(attrs ...field.AssignExpr) IPetDo
	Joins(fields ...field.RelationField) IPetDo
	Preload(fields ...field.RelationField) IPetDo
	FirstOrInit() (*entity.Pet, error)
	FirstOrCreate() (*entity.Pet, error)
	FindByPage(offset int, limit int) (result []*entity.Pet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p petDo) Debug() IPetDo {
	return p.withDO(p.DO.Debug())
}

func (p petDo) WithContext(ctx context.Context) IPetDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p petDo) ReadDB() IPetDo {
	return p.Clauses(dbresolver.Read)
}

func (p petDo) WriteDB() IPetDo {
	return p.Clauses(dbresolver.Write)
}

func (p petDo) Session(config *gorm.Session) IPetDo {
	return p.withDO(p.DO.Session(config))
}

func (p petDo) Clauses(conds ...clause.Expression) IPetDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p petDo) Returning(value interface{}, columns ...string) IPetDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p petDo) Not(conds ...gen.Condition) IPetDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p petDo) Or(conds ...gen.Condition) IPetDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p petDo) Select(conds ...field.Expr) IPetDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p petDo) Where(conds ...gen.Condition) IPetDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p petDo) Order(conds ...field.Expr) IPetDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p petDo) Distinct(cols ...field.Expr) IPetDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p petDo) Omit(cols ...field.Expr) IPetDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p petDo) Join(table schema.Tabler, on ...field.Expr) IPetDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p petDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPetDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p petDo) RightJoin(table schema.Tabler, on ...field.Expr) IPetDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p petDo) Group(cols ...field.Expr) IPetDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p petDo) Having(conds ...gen.Condition) IPetDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p petDo) Limit(limit int) IPetDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p petDo) Offset(offset int) IPetDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p petDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPetDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p petDo) Unscoped() IPetDo {
	return p.withDO(p.DO.Unscoped())
}

func (p petDo) Create(values ...*entity.Pet) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p petDo) CreateInBatches(values []*entity.Pet, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p petDo) Save(values ...*entity.Pet) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p petDo) First() (*entity.Pet, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Pet), nil
	}
}

func (p petDo) Take() (*entity.Pet, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Pet), nil
	}
}

func (p petDo) Last() (*entity.Pet, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Pet), nil
	}
}

func (p petDo) Find() ([]*entity.Pet, error) {
	result, err := p.DO.Find()
	return result.([]*entity.Pet), err
}

func (p petDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Pet, err error) {
	buf := make([]*entity.Pet, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p petDo) FindInBatches(result *[]*entity.Pet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p petDo) Attrs(attrs ...field.AssignExpr) IPetDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p petDo) Assign(attrs ...field.AssignExpr) IPetDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p petDo) Joins(fields ...field.RelationField) IPetDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p petDo) Preload(fields ...field.RelationField) IPetDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p petDo) FirstOrInit() (*entity.Pet, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Pet), nil
	}
}

func (p petDo) FirstOrCreate() (*entity.Pet, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Pet), nil
	}
}

func (p petDo) FindByPage(offset int, limit int) (result []*entity.Pet, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p petDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p petDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p petDo) Delete(models ...*entity.Pet) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *petDo) withDO(do gen.Dao) *petDo {
	p.DO = *do.(*gen.DO)
	return p
}
